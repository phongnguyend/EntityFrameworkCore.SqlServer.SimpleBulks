using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace EntityFrameworkCore.SqlServer.SimpleBulks.Extensions;

public static class IListExtensions
{
    public static DataTable ToDataTable<T>(this IEnumerable<T> data, IEnumerable<string> propertyNames, IReadOnlyDictionary<string, ValueConverter> valueConverters = null, bool addIndexNumberColumn = false, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var properties = TypeDescriptor.GetProperties(typeof(T));

        var updatablePros = new List<PropertyDescriptor>();
        foreach (PropertyDescriptor prop in properties)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (propertyNames.Contains(prop.Name))
            {
                updatablePros.Add(prop);
            }
        }

        var table = new DataTable() { MinimumCapacity = data.Count() };
        foreach (PropertyDescriptor prop in updatablePros)
        {
            cancellationToken.ThrowIfCancellationRequested();

            table.Columns.Add(prop.Name, GetProviderClrType(prop, valueConverters));
        }

        if (addIndexNumberColumn)
        {
            table.Columns.Add(Constants.AutoGeneratedIndexNumberColumn, typeof(long));
        }

        long idx = 0;

        foreach (T item in data)
        {
            cancellationToken.ThrowIfCancellationRequested();

            var row = table.NewRow();
            foreach (PropertyDescriptor prop in updatablePros)
            {
                cancellationToken.ThrowIfCancellationRequested();

                row[prop.Name] = GetProviderValue(prop, item, valueConverters) ?? DBNull.Value;
            }

            if (addIndexNumberColumn)
            {
                row[Constants.AutoGeneratedIndexNumberColumn] = idx;
            }

            table.Rows.Add(row);

            idx++;
        }
        return table;
    }

    public static async Task<DataTable> ToDataTableAsync<T>(this IEnumerable<T> data, IEnumerable<string> propertyNames, IReadOnlyDictionary<string, ValueConverter> valueConverters = null, bool addIndexNumberColumn = false, CancellationToken cancellationToken = default)
    {
        return await Task.Run(() =>
        {
            return data.ToDataTable(propertyNames, valueConverters, addIndexNumberColumn, cancellationToken);
        }, cancellationToken);
    }

    private static Type GetProviderClrType(PropertyDescriptor property, IReadOnlyDictionary<string, ValueConverter> valueConverters)
    {
        if (valueConverters != null && valueConverters.TryGetValue(property.Name, out var converter))
        {
            return converter.ProviderClrType;
        }

        return Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
    }

    private static object GetProviderValue<T>(PropertyDescriptor property, T item, IReadOnlyDictionary<string, ValueConverter> valueConverters)
    {
        if (valueConverters != null && valueConverters.TryGetValue(property.Name, out var converter))
        {
            return converter.ConvertToProvider(property.GetValue(item));
        }

        return property.GetValue(item);
    }
}
